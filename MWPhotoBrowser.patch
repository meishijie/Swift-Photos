diff --git a/Pods/MWPhotoBrowser/Pod/Classes/MWPhoto.m b/Pods/MWPhotoBrowser/Pod/Classes/MWPhoto.m
index 049d836..02242e7 100644
--- a/Pods/MWPhotoBrowser/Pod/Classes/MWPhoto.m
+++ b/Pods/MWPhotoBrowser/Pod/Classes/MWPhoto.m
@@ -191,7 +191,7 @@
     @try {
         SDWebImageManager *manager = [SDWebImageManager sharedManager];
         _webImageOperation = [manager downloadImageWithURL:url
-                                                   options:0
+                                                   options:SDWebImageAllowInvalidSSLCertificates
                                                   progress:^(NSInteger receivedSize, NSInteger expectedSize) {
                                                       if (expectedSize > 0) {
                                                           float progress = receivedSize / (float)expectedSize;
diff --git a/Pods/MWPhotoBrowser/Pod/Classes/MWZoomingScrollView.m b/Pods/MWPhotoBrowser/Pod/Classes/MWZoomingScrollView.m
index 86aa735..4bafd79 100644
--- a/Pods/MWPhotoBrowser/Pod/Classes/MWZoomingScrollView.m
+++ b/Pods/MWPhotoBrowser/Pod/Classes/MWZoomingScrollView.m
@@ -267,27 +267,13 @@
         maxScale = 4;
     }
     
-    // Image is smaller than screen so no zooming!
-    if (xScale >= 1 && yScale >= 1) {
-        minScale = 1.0;
-    }
-    
     // Set min/max zoom
     self.maximumZoomScale = maxScale;
     self.minimumZoomScale = minScale;
     
     // Initial zoom
     self.zoomScale = [self initialZoomScaleWithMinScale];
-    
-    // If we're zooming to fill then centralise
-    if (self.zoomScale != minScale) {
-        
-        // Centralise
-        self.contentOffset = CGPointMake((imageSize.width * self.zoomScale - boundsSize.width) / 2.0,
-                                         (imageSize.height * self.zoomScale - boundsSize.height) / 2.0);
 
-    }
-    
     // Disable scrolling initially until the first pinch to fix issues with swiping on an initally zoomed in photo
     self.scrollEnabled = NO;
     
@@ -374,10 +360,6 @@
 
 #pragma mark - Tap Detection
 
-- (void)handleSingleTap:(CGPoint)touchPoint {
-	[_photoBrowser performSelector:@selector(toggleControls) withObject:nil afterDelay:0.2];
-}
-
 - (void)handleDoubleTap:(CGPoint)touchPoint {
     
     // Dont double tap to zoom if showing a video
@@ -410,8 +392,8 @@
 }
 
 // Image View
-- (void)imageView:(UIImageView *)imageView singleTapDetected:(UITouch *)touch { 
-    [self handleSingleTap:[touch locationInView:imageView]];
+- (void)imageView:(UIImageView *)imageView singleTapDetected:(UITouch *)touch {
+    [self view:(imageView.superview ? imageView.superview : imageView) singleTapDetected:touch];
 }
 - (void)imageView:(UIImageView *)imageView doubleTapDetected:(UITouch *)touch {
     [self handleDoubleTap:[touch locationInView:imageView]];
@@ -419,24 +401,33 @@
 
 // Background View
 - (void)view:(UIView *)view singleTapDetected:(UITouch *)touch {
-    // Translate touch location to image view location
+    CGFloat touchX = [touch locationInView:view.window].x;
+    CGFloat width = view.frame.size.width;
+    if (touchX < width * 0.25 && touch.tapCount == 1) {
+        [_photoBrowser showPreviousPhotoAnimated:NO];
+    }
+    else if (touchX > width * 0.75 && touch.tapCount == 1)  { // Now use double tap to hide nav bar
+        [_photoBrowser showNextPhotoAnimated:NO];
+    }
+    else if (touch.tapCount == 1) {
+        [_photoBrowser performSelector:@selector(toggleControls) withObject:nil afterDelay:0.2];
+    }
+}
+
+- (CGPoint)translateLocationOfTouch:(UITouch *)touch inView:(UIView *)view {
     CGFloat touchX = [touch locationInView:view].x;
     CGFloat touchY = [touch locationInView:view].y;
     touchX *= 1/self.zoomScale;
     touchY *= 1/self.zoomScale;
     touchX += self.contentOffset.x;
     touchY += self.contentOffset.y;
-    [self handleSingleTap:CGPointMake(touchX, touchY)];
+    return CGPointMake(touchX, touchY);
 }
+
 - (void)view:(UIView *)view doubleTapDetected:(UITouch *)touch {
     // Translate touch location to image view location
-    CGFloat touchX = [touch locationInView:view].x;
-    CGFloat touchY = [touch locationInView:view].y;
-    touchX *= 1/self.zoomScale;
-    touchY *= 1/self.zoomScale;
-    touchX += self.contentOffset.x;
-    touchY += self.contentOffset.y;
-    [self handleDoubleTap:CGPointMake(touchX, touchY)];
+    CGPoint location = [self translateLocationOfTouch:touch inView:view];
+    [self handleDoubleTap:location];
 }
 
 @end
